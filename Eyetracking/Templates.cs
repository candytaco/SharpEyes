
using OpenCvSharp;
using System.Threading.Tasks;

namespace Eyetracking
{
	/// <summary>
	/// Hard-coded templates for matching numbers and stuff
	/// </summary>
	internal static class Templates
	{
		/// <summary>
		/// Shape of seconds symbol burned into the video
		/// </summary>
		public static readonly Mat SECONDS_SYMBOL= new Mat(12, 8, MatType.CV_8UC1, new byte[,]{	{  0,   0,   0,   0,   0,   0,   0,   0},
																								{  0,   0,   0,   0,   0,   0,   0,   0},
																								{  0,   0,   0,   0,   0,   0,   0,   0},
																								{  0,   0,   0,   0,   0,   0,   0,   0},
																								{  0,   0, 255, 255, 255, 255,   0,   0},
																								{  0, 255, 255,   0,   0, 255, 255,   0},
																								{  0, 255, 255,   0,   0,   0,   0,   0},
																								{  0,   0, 255, 255, 255, 255,   0,   0},
																								{  0,   0,   0,   0,   0, 255, 255,   0},
																								{  0, 255, 255,   0,   0, 255, 255,   0},
																								{  0,   0, 255, 255, 255, 255,   0,   0},
																								{  0,   0,   0,   0,   0,   0,   0,   0}});
	
		public static readonly Mat[] Numbers = {
			new Mat(12, 8, MatType.CV_8UC1, new byte[,]{	{  0,   0,   0,   0,   0,   0,   0,   0},
														{  0,   0, 255, 255, 255, 255,   0,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0,   0, 255, 255, 255, 255,   0,   0},
														{  0,   0,   0,   0,   0,   0,   0,   0}}),
			new Mat(12, 8, MatType.CV_8UC1, new byte[,]{	{  0,   0,   0,   0,   0,   0,   0,   0},
														{  0,   0,   0, 255, 255,   0,   0,   0},
														{  0, 255, 255, 255, 255,   0,   0,   0},
														{  0,   0,   0, 255, 255,   0,   0,   0},
														{  0,   0,   0, 255, 255,   0,   0,   0},
														{  0,   0,   0, 255, 255,   0,   0,   0},
														{  0,   0,   0, 255, 255,   0,   0,   0},
														{  0,   0,   0, 255, 255,   0,   0,   0},
														{  0,   0,   0, 255, 255,   0,   0,   0},
														{  0,   0,   0, 255, 255,   0,   0,   0},
														{  0,   0,   0, 255, 255,   0,   0,   0},
														{  0,   0,   0,   0,   0,   0,   0,   0}}),
			new Mat(12, 8, MatType.CV_8UC1, new byte[,]{	{  0,   0,   0,   0,   0,   0,   0,   0},
														{  0,   0, 255, 255, 255, 255,   0,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0,   0,   0,   0,   0, 255, 255,   0},
														{  0,   0,   0,   0, 255, 255,   0,   0},
														{  0,   0,   0, 255, 255,   0,   0,   0},
														{  0,   0, 255, 255,   0,   0,   0,   0},
														{  0, 255, 255,   0,   0,   0,   0,   0},
														{  0, 255, 255,   0,   0,   0,   0,   0},
														{  0, 255, 255, 255, 255, 255, 255,   0},
														{  0,   0,   0,   0,   0,   0,   0,   0}}),
			new Mat(12, 8, MatType.CV_8UC1, new byte[,]{	{  0,   0,   0,   0,   0,   0,   0,   0},
														{  0,   0, 255, 255, 255, 255,   0,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0,   0,   0,   0,   0, 255, 255,   0},
														{  0,   0,   0,   0,   0, 255, 255,   0},
														{  0,   0,   0, 255, 255, 255,   0,   0},
														{  0,   0,   0,   0,   0, 255, 255,   0},
														{  0,   0,   0,   0,   0, 255, 255,   0},
														{  0,   0,   0,   0,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0,   0, 255, 255, 255, 255,   0,   0},
														{  0,   0,   0,   0,   0,   0,   0,   0}}),
			new Mat(12, 8, MatType.CV_8UC1, new byte[,]{	{  0,   0,   0,   0,   0,   0,   0,   0},
														{  0,   0,   0,   0,   0, 255, 255,   0},
														{  0,   0,   0,   0, 255, 255, 255,   0},
														{  0,   0,   0, 255, 255, 255, 255,   0},
														{  0,   0,   0, 255, 255, 255, 255,   0},
														{  0,   0, 255, 255,   0, 255, 255,   0},
														{  0,   0, 255, 255,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0, 255, 255, 255, 255, 255, 255,   0},
														{  0,   0,   0,   0,   0, 255, 255,   0},
														{  0,   0,   0,   0,   0, 255, 255,   0},
														{  0,   0,   0,   0,   0,   0,   0,   0}}),
			new Mat(12, 8, MatType.CV_8UC1, new byte[,]{	{  0,   0,   0,   0,   0,   0,   0,   0},
														{  0, 255, 255, 255, 255, 255, 255,   0},
														{  0, 255, 255,   0,   0,   0,   0,   0},
														{  0, 255, 255,   0,   0,   0,   0,   0},
														{  0, 255, 255,   0,   0,   0,   0,   0},
														{  0, 255, 255, 255, 255, 255,   0,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0,   0,   0,   0,   0, 255, 255,   0},
														{  0,   0,   0,   0,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0,   0, 255, 255, 255, 255,   0,   0},
														{  0,   0,   0,   0,   0,   0,   0,   0}}),
			new Mat(12, 8, MatType.CV_8UC1, new byte[,]{	{  0,   0,   0,   0,   0,   0,   0,   0},
														{  0,   0, 255, 255, 255, 255,   0,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0,   0,   0,   0},
														{  0, 255, 255,   0,   0,   0,   0,   0},
														{  0, 255, 255, 255, 255, 255,   0,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0,   0, 255, 255, 255, 255,   0,   0},
														{  0,   0,   0,   0,   0,   0,   0,   0}}),
			new Mat(12, 8, MatType.CV_8UC1, new byte[,]{	{  0,   0,   0,   0,   0,   0,   0,   0},
														{  0, 255, 255, 255, 255, 255, 255,   0},
														{  0,   0,   0,   0,   0, 255, 255,   0},
														{  0,   0,   0,   0, 255, 255,   0,   0},
														{  0,   0,   0,   0, 255, 255,   0,   0},
														{  0,   0,   0, 255, 255,   0,   0,   0},
														{  0,   0,   0, 255, 255,   0,   0,   0},
														{  0,   0,   0, 255, 255,   0,   0,   0},
														{  0,   0, 255, 255,   0,   0,   0,   0},
														{  0,   0, 255, 255,   0,   0,   0,   0},
														{  0,   0, 255, 255,   0,   0,   0,   0},
														{  0,   0,   0,   0,   0,   0,   0,   0}}),
			new Mat(12, 8, MatType.CV_8UC1, new byte[,]{	{  0,   0,   0,   0,   0,   0,   0,   0},
														{  0,   0, 255, 255, 255, 255,   0,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0,   0, 255, 255, 255, 255,   0,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0,   0, 255, 255, 255, 255,   0,   0},
														{  0,   0,   0,   0,   0,   0,   0,   0}}),
			new Mat(12, 8, MatType.CV_8UC1, new byte[,]{	{  0,   0,   0,   0,   0,   0,   0,   0},
														{  0,   0, 255, 255, 255, 255,   0,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0,   0, 255, 255, 255, 255, 255,   0},
														{  0,   0,   0,   0,   0, 255, 255,   0},
														{  0,   0,   0,   0,   0, 255, 255,   0},
														{  0, 255, 255,   0,   0, 255, 255,   0},
														{  0,   0, 255, 255, 255, 255,   0,   0},
														{  0,   0,   0,   0,   0,   0,   0,   0}})};

		private static Mat[] correlationResult = { new Mat(), new Mat(), new Mat(), new Mat(), new Mat(),
												   new Mat(), new Mat(), new Mat(), new Mat(), new Mat()};
		private static object ParallelLock = new object();

		/// <summary>
		/// Gets the best digit that matches the image
		/// </summary>
		/// <param name="image">8x12 single channel image matrix from eyetracking video</param>
		/// <returns>best matchine digit</returns>
		public static int MatchDigit(Mat image)
		{
			int bestMatch = -1;
			double bestCorrelation = -10;

			//image.SaveImage("debug.png");

			Parallel.For(0, 10, i =>
			{
				Cv2.MatchTemplate(image, Numbers[i], correlationResult[i], TemplateMatchModes.CCoeffNormed);
				lock (ParallelLock)
				{
					if (correlationResult[i].At<float>(0, 0) > bestCorrelation)
					{
						bestCorrelation = correlationResult[i].At<float>(0, 0);
						bestMatch = i;
					}
				}
			});

			return bestMatch;
		}

		/// <summary>
		/// Checks whether the image is a seconds marker because Avotec moves those numbers around
		/// </summary>
		/// <param name="image">8x12 image matrix</param>
		/// <returns></returns>
		public static bool SecondsMarkerMatch(Mat image)
		{
			Cv2.MatchTemplate(image, SECONDS_SYMBOL, correlationResult[0], TemplateMatchModes.CCoeffNormed);
			return correlationResult[0].At<float>(0, 0) > 0.99;
		}
	}
}
